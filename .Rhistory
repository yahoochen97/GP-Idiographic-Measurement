} else if(MODEL_NAME=="gpcm"){
f = as*(theta-bs)
f = cumsum(f)
} else if(MODEL_NAME=="sequential"){
f = as*(theta-bs)
}
return(f)
}
get_latent_f(coefs[j],thetas[i,j],coefs[j,(2):C])
logit
?plogis
?qlogis(1)
qlogis(1)
qlogis(0)
qlogis(0.5)
plogis(0)
plogis(-10)
plogis(10)
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,(2):C])
tmp
plogis(tmp)
get_latent_f = function(as, theta, bs){
if(MODEL_NAME=="graded"){
f = as*(theta-bs)
} else if(MODEL_NAME=="gpcm"){
f = as*(theta-bs)
f = cumsum(f)
} else if(MODEL_NAME=="sequential"){
f = as*theta+bs
}
return(f)
}
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,(2):C])
plogis(tmp)
(1-plogis(tmp))*(plogis(tmp))
cumprod((1-plogis(tmp))*(plogis(tmp)))
coefs[1,]
plogis(tmp)
c(1,plogis(tmp))
cumprod(c(1,plogis(tmp)))
cumprod(c(1,plogis(tmp)))/sum(cumprod(c(1,plogis(tmp))))
plogis(tmp)
coefs
C
plogis(tmp)
tmp = plogis(tmp)
tmp[1]
cumprod(1-tmp = plogis(tmp))
cumprod(1-tmp)
1-tmp
tmp
1-tmp
cumprod(1-tmp)
cumprod(1-tmp)*tmp
sum(cumprod(1-tmp)*tmp)
sum(cumprod(1-tmp)*tmp)+tmp[1]
tmp
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,(2):C])
tmp
c(-10,tmp,10)
tmp=plogis(c(-10,tmp,10))
tmp
tmp[2:(C+1)]*cumprod(tmp[2:(C+1)])
tmp[2:(C+1)]*cumprod(1-tmp[2:(C+1)])
cumprod(1-tmp[2:(C+1)])
c(1,cumprod(1-tmp[2:(C-1)]))
c(1,cumprod(1-tmp[1:(C-1)]))
c(1,cumprod(1-tmp[1:(C-1)]))*tmp[2:6]
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,(2):C])
tmp
tmp = plogis(tmp)
c(tmp,1)*c(1,cumprod(1-tmp))
sum(c(tmp,1)*c(1,cumprod(1-tmp)))
test_data[i,h,j]
test_data[i,h,j]
get_latent_f = function(as, theta, bs){
if(MODEL_NAME=="graded"){
f = as*(theta-bs)
} else if(MODEL_NAME=="gpcm"){
f = as*(theta-bs)
f = cumsum(f)
} else if(MODEL_NAME=="sequential"){
f = as*theta+bs
}
return(f)
}
# predict test observations and likelihood
test_acc = c()
test_ll = c()
dim(test_data) = c(n, horizon, m)
for(i in 1:n){
for(j in 1:m){
for(h in 1:horizon){
if(!is.na(test_data[i,h,j])){
if(UNI=="uni"){
# tmp = coefs[j]*(thetas[i,j]-coefs[j,(2):C])
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,(2):C])
} else{
tmp = 0
for(r in 1:RANK){
# tmp = tmp + coefs[j,r]*(thetas[i,j,r]-coefs[j,(RANK+1):(RANK+C-1)])
tmp = tmp + get_latent_f(coefs[j,r],thetas[i,j,r],coefs[j,(RANK+1):(RANK+C-1)])
}
}
if( MODEL_NAME=="graded"){
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
} else if (MODEL_NAME=="gpcm"){
tmp = c(0, tmp)
ps = as.vector(exp(tmp)/sum(exp(tmp)))
} else if (MODEL_NAME=="sequential"){
tmp = plogis(tmp)
ps = c(tmp,1)*c(1,cumprod(1-tmp))
}
pred_y = which.max(ps)
test_acc = c(test_acc, pred_y==test_data[i,h,j])
if(ps[test_data[i,h,j]]<=-1e-6){
print(paste(i,"_",h,"_",j,sep=""))
}
test_ll = c(test_ll, log(1e-6+ps[test_data[i,h,j]]))
}
}
}
}
test_acc = mean(test_acc)
test_ll = mean(test_ll[!is.na(test_ll)])
test_acc
test_ll
i=1
j=1
h=1
test_data[i,h,j]
test_data[i,2,j]
h=2
train_data[i,2,j]
test_data[i,1,1]
test_data[i,1,2]
test_data[i,1,3]
h=1
j=3
train_data[i,j]
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,(2):C])
tmp = plogis(tmp)
ps = c(tmp,1)*c(1,cumprod(1-tmp))
ps
train_data[i,j]
j
tmp
get_latent_f(coefs[j],thetas[i,j],coefs[j,(2):C])
coefs[3,]
train_data[,3]
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
mean(test_acc)
mean(test_ll[!is.na(test_ll)])
tmp
ps
coefs[j]
coefs[j,]
thetas[i,j]
get_latent_f = function(as, theta, bs){
if(MODEL_NAME=="graded"){
f = as*(theta-bs)
} else if(MODEL_NAME=="gpcm"){
f = as*(theta-bs)
f = cumsum(f)
} else if(MODEL_NAME=="sequential"){
f = as*theta-bs
}
return(f)
}
# predict test observations and likelihood
test_acc = c()
test_ll = c()
dim(test_data) = c(n, horizon, m)
for(i in 1:n){
for(j in 1:m){
for(h in 1:horizon){
if(!is.na(test_data[i,h,j])){
if(UNI=="uni"){
# tmp = coefs[j]*(thetas[i,j]-coefs[j,(2):C])
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
} else{
tmp = 0
for(r in 1:RANK){
# tmp = tmp + coefs[j,r]*(thetas[i,j,r]-coefs[j,(RANK+1):(RANK+C-1)])
tmp = tmp + get_latent_f(coefs[j,r],thetas[i,j,r],coefs[j,(RANK+1):(RANK+C-1)])
}
}
if( MODEL_NAME=="graded"){
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
} else if (MODEL_NAME=="gpcm"){
tmp = c(0, tmp)
ps = as.vector(exp(tmp)/sum(exp(tmp)))
} else if (MODEL_NAME=="sequential"){
tmp = plogis(tmp)
ps = c(tmp,1)*c(1,cumprod(1-tmp))
}
pred_y = which.max(ps)
test_acc = c(test_acc, pred_y==test_data[i,h,j])
if(ps[test_data[i,h,j]]<=-1e-6){
print(paste(i,"_",h,"_",j,sep=""))
}
test_ll = c(test_ll, log(1e-6+ps[test_data[i,h,j]]))
}
}
}
}
mean(test_acc)
mean(test_acc)
mean(test_ll[!is.na(test_ll)])
i=1
j=3
h=1
get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = plogis(tmp)
tmp
ps = c(tmp,1)*c(1,cumprod(1-tmp))
ps
train_data[i,h,j]
train_data[i,j]
cumprod(1-tmp)
tmp
1-cumprod(1-tmp)
,coefs[j,2:C]
coefs[j,2:C]
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
test_acc
test_ll
i=1
j=13
h=1
j=3
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp
tmp = plogis(tmp)
tmp
cumprod(1-tmp)
coefs[j,2:C]
coefs[3,2:C]
coefs[3,C]=1
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = plogis(tmp)
tmp
cumprod(1-tmp)
ps = c(tmp,1)*c(1,cumprod(1-tmp))
ps
coefs[j,2:C]
coefs[3,C]=-10
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = plogis(tmp)
tmp
cumprod(1-tmp)
ps = c(tmp,1)*c(1,cumprod(1-tmp))
ps
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
test_ll
test_acc
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
coefs
TYPE
MODEL_NAME
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
coef(mirt_fit, simplify = TRUE)
coefs
coefs = coef(mirt_fit, IRTpars = TRUE, simplify = TRUE)$items
if(MODEL_NAME=="sequential" || MODEL_NAME=="ULL"){
coefs = coef(mirt_fit, simplify = TRUE)$items
} else{
coefs = coef(mirt_fit, IRTpars = TRUE, simplify = TRUE)$items
}
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
coefs
coefs[j]
thetas[i,j]^coefs[j]
thetas[i,j]
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
tmp
ps = c(tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c+1]/tmp[c])
}
ps
tmp
thetas[i,j]^coefs[j]
thetas[i,j]^coefs[j]*coefs[j,2:C]
thetas[i,j]^coefs[j]*exp(coefs[j,2:C])
get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
ps = c(tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c+1]/tmp[c])
}
ps = as.vector(c(ps, 1-tmp[C-1]))
ps
tmp
tmp[1]
get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp=get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
sum(ps)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
warnings(0)
mean(test_acc)
test_ll
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
i=10
j=14
h=10
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp
MODEL_NAME=="ULL"
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
!is.na(test_data[i,h,j]
)
test_data[i,h,j]
ps[test_data[i,h,j]]
i=10
j
h
h=14
j=10
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
coefs = coef(mirt_fit, simplify = TRUE)$items
coefs
coef(mirt_fit, simplify = TRUE)
coef(mirt_fit)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
coefs
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
coefs
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
TYPE
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
MODEL_NAME
10_14_10
i=10
h=14
j=10
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
tmp
coefs[j,2:C]
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
i=10
j=6
h=15
get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
coefs[j,2:C]
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = exp(tmp)/sum(exp(tmp))
tmp
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
sum(ps)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
i=10
j=6
h=15
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = exp(tmp)/sum(exp(tmp))
tmp
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
coefs[j,2:C]
coefs[j,C]=0
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
tmp
ps
coefs[j,C]=NA
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
tmp
ps
tmp
tmp[-1]
tmp[length(tmp)]
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[length(tmp)]))
ps
sum(ps)
sum(ps[-4])
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(length(tmp)-1)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[length(tmp)]))
ps
sum(ps)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
i=10
j=6
h=15
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(length(tmp)-1)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[length(tmp)]))
ps
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
coefs[j,]
coefs[j,2:C]
coefs[j]
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
test_acc
test_ll
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
test_ll
test_acc
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
HYP
HYP = paste("n", n, '_m', m, '_t', horizon, '_rank', RANK, '_SEED', SEED, sep="")
data = read.csv(paste("data/synthetic/data_", HYP,'.csv', sep=""))
paste("./results/synthetic/", HYP, ".RData" , sep="")
TYPE
paste("./results/synthetic/", TYPE,"_", HYP, ".RData" , sep="")
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
s
print(s)
i
j
h
graded_multi
tmp = get_latent_f(coefs[j],thetas[i,j],coefs[j,2:C])
coefs[j]
thetas[i,j]
fscores(mirt_fit)
n
horizon
thetas = array(fscores(mirt_fit), c(n,horizon))
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
