?chol
?mvnnorm
source('~/Documents/GitHub/GP_gradient/GPR/SyntheticDataGen_LatLong.R', echo=TRUE)
plogis(-2)
? rbinom
rbinom(N, df_group$n, plogis(theta))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
rbinom(1,47,plogis(-2))
plogis(0)
source('~/Documents/GitHub/GP_gradient/GPR/SyntheticDataGen_LatLong.R', echo=TRUE)
source('~/Documents/GitHub/GP_gradient/GPR/SyntheticDataGen_LatLong.R', echo=TRUE)
source('~/Documents/GitHub/GP_gradient/GPR/SyntheticDataGen_LatLong.R', echo=TRUE)
plogis(2)
qlogis(0.88079)
ln(1)
qlogis(0.88079)
log(2)
log(10)
log(1+exp(2))
?plogis
source('~/Documents/GitHub/GP_gradient/GPR/SyntheticDataGen_LatLong.R', echo=TRUE)
latitude_u
longitude_u
head(df_group)
theta
sd(theta)
setwd("~/Documents/GitHub/GP-Idiographic-Measurement")
debugSource('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
debugSource('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
mean(test_acc)
mean(test_ll[!is.na(test_ll)])
sum(!is.na(test_ll))
sum(is.na(test_ll))
"5_30_36"
i=5
j=36
h=30
tmp = get_latent_f(coefs[j],thetas[i,h],coefs[j,2:C])
tmp
tmp = exp(tmp)/sum(exp(tmp))
ps = c(1-tmp[1])
for(c in 1:(C-2)){
ps = c(ps, tmp[c]-tmp[c+1])
}
ps = as.vector(c(ps, tmp[C-1]))
ps
tmp
tmp
c
ps
tmp
tmp[C-1]
ps
tmp
tmp = get_latent_f(coefs[j],thetas[i,h],coefs[j,2:C])
tmp
coefs[j,2:C]
coefs[j]
debugSource('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
q
debugSource('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
debugSource('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
debugSource('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
debugSource('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
debugSource('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_MIRT.R', echo=TRUE)
library(gimme)
install.packages("gimme")
library(gimme)
data("simData", package = "gimme")
simData
simData$group_1_1
nrow(simData$group_1_1)
ncol(simData$group_1_1)
?gimme
?gimmeSEM
mirt_data[1]
mirt_data[1,,]
mirt_data[1,]
mirt_data = array(array(0, n*horizon*m), c(n,horizon,m))
train_mask = array(array(0, n*horizon*m), c(n,horizon,m))
for(i in 1:n){
for(j in 1:m){
for(h in 1:horizon){
tmp = data[data$unit==(i-1) & data$item==(j-1) & data$time==(h-1),]
mirt_data[i,h,j] = tmp$y
if (tmp$train){ train_mask[i,h,j]=1 }
}
}
}
mirt_data[1,,]
train_data = mirt_data
test_data = mirt_data
train_data[train_mask==0] = NA
test_data[train_mask==1] = NA
# reshape to list of 2d matrix
C = length(unique(array(mirt_data, c(n*horizon*m))))
data = list()
for(i in 1:n){
data[[paste("group_1_",i,sep="")]] = data.frame(train_data[i,,])
}
data$group_1_1
fit <- gimmeSEM(data     = data,
out      = "./results/synthetic")
fit <- gimmeSEM(data     = simData,
out      = "./results/synthetic")
simData$group_1_1
data$group_1_1
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
data = list()
for(i in 1:n){
data[[paste("group_1_",i,sep="")]] = data.frame(data[i,,1:10])
}
fit <- gimmeSEM(data     = data,
out      = "./results/synthetic")
length(data)
data("simData", package = "gimme")
force(simData)
force(simData)
data
data = list()
for(i in 1:n){
data[[paste("group_1_",i,sep="")]] = data.frame(data[i,,1:10])
}
C = length(unique(array(mirt_data, c(n*horizon*m))))
data = list()
for(i in 1:n){
data[[paste("group_1_",i,sep="")]] = data.frame(mirt_data[i,,1:10])
}
data
fit <- gimmeSEM(data     = data,
out      = "./results/synthetic")
data$group_1_1[1,]
data$group_1_1[,1]
mirt_data[i,,1:10]
data = list()
for(i in 1:n){
data[[paste("group_1_",i,sep="")]] = data.frame(mirt_data[i,,c(1,11,21,31,41)])
}
# define GIMME model
fit <- gimmeSEM(data     = data,
out      = "./results/synthetic")
data$group_1_1
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
i=1
j=1
length(unique(train_data[i,,c(1,11,21,31,41)][,j]))
length(unique(train_data[i,,c(1,11,21,31,41)]))
length(unique(train_data[i,,c(1,11,21,31,41)][,1]))
train_data[i,,c(1,11,21,31,41)][,1]
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
tmp
unique(tmp[!is.na(tmp)])
data[[paste("group_1_",i,sep="")]][,j]
rnorm(horizon)[!is.na(tmp)]
length( rnorm(horizon)[!is.na(tmp)])
length(data[[paste("group_1_",i,sep="")]][,j])
data[[paste("group_1_",i,sep="")]][,j] + rnorm(horizon)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
i=3
data.frame(train_data[i,,c(1,11,21,31,41)])
data.frame(train_data[i,,c(1,11,21,31,41)])[,1]
data.frame(train_data[i,,c(1,11,21,31,41)])[,2]
data.frame(train_data[i,,c(1,11,21,31,41)])[,3]
data.frame(train_data[i,,c(1,11,21,31,41)])[,4]
data.frame(train_data[i,,c(1,11,21,31,41)])[,5]
j=3
data.frame(train_data[i,,c(1,11,21,31,41)])[,j]
data.frame(train_data[i,,c(1,11,21,31,41)])[,2]
tmp = train_data[i,,c(1,11,21,31,41)][,2]
tmp
length(unique(tmp[!is.na(tmp)]))
data[[paste("group_1_",i,sep="")]][,j]
j
j=2
data[[paste("group_1_",i,sep="")]][,j]
data[[paste("group_1_",i,sep="")]]
data.frame(train_data[i,,c(1,11,21,31,41)])[,4]
data.frame(train_data[i,,c(1,11,21,31,41)])
fit <- gimmeSEM(data     = data,
out      = "./results/synthetic")
var(data[[paste("group_1_",i,sep="")]][,j])
i
j
j=4
tmp = train_data[i,,c(1,11,21,31,41)][,j]
tmp
var(tmp[!is.na(tmp)])
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
fit <- gimmeSEM(data = data,
out = "./results/synthetic",
ordered = c(1,2,3,4,5))
fit
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
m
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
fit <- gimmeSEM(data = data,
out = "./results/synthetic",
ordered = 1:5)
fit <- gimmeSEM(data = data,
out = "./results/synthetic")
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
factor_strings = c()
for(j in 1:m){
factor_strings = c(factor_strings, paste('X',j, ' ~ X', j, 'lag', sep=''))
}
s = paste(factor_strings, collapse="\n")
s
print(s)
fit <- gimmeSEM(data = data,
out = "./results/synthetic",
paths = s)
factor_strings = c()
for(j in 1:m){
factor_strings = c(factor_strings, paste('X',j, ' ~ X', j+1, 'lag', sep=''))
}
1 % m/RANk
m/RANk
m/RANk
m/RANK
1 % m/RANK
1 %% m/RANK
2 %% m/RANK
m
2 %% m/RANK
m/RANK %% 2
(m/RANK) %% 2
2 %% (m/RANK)
for(j in 1:m){
if(j %% (m/RANK)){
factor_strings = c(factor_strings, paste('X',j, ' ~ X', j+1, 'lag', sep=''))
}
}
s = paste(factor_strings, collapse="\n")
s
s = paste(factor_strings, collapse="\n")''
s = paste(factor_strings, collapse="\n")
s = paste(factor_strings, collapse="\n")
fit <- gimmeSEM(data = data,
out = "./results/synthetic",
paths = s)
data$group_1_1
fit <- gimmeSEM(data = data,
out = "./results/synthetic",
paths = s)
s = 'X1~X2
X2~X4lag'
s = 'X1~X2
X2~X4lag'
fit <- gimmeSEM(data = data,
out = "./results/synthetic",
paths = s)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
source('~/Documents/GitHub/GP-Idiographic-Measurement/utilities/simulation_GIMME.R', echo=TRUE)
